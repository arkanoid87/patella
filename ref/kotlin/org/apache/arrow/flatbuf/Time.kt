// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.flatbuf

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * Time is either a 32-bit or 64-bit signed integer type representing an
 * elapsed time since midnight, stored in either of four units: seconds,
 * milliseconds, microseconds or nanoseconds.
 *
 * The integer `bitWidth` depends on the `unit` and must be one of the following:
 * * SECOND and MILLISECOND: 32 bits
 * * MICROSECOND and NANOSECOND: 64 bits
 *
 * The allowed values are between 0 (inclusive) and 86400 (=24*60*60) seconds
 * (exclusive), adjusted for the time unit (for example, up to 86400000
 * exclusive for the MILLISECOND unit).
 * This definition doesn't allow for leap seconds. Time values from
 * measurements with leap seconds will need to be corrected when ingesting
 * into Arrow (for example by replacing the value 86400 with 86399).
 */
@Suppress("unused")
@ExperimentalUnsignedTypes
class Time : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Time {
        __init(_i, _bb)
        return this
    }
    val unit : Short
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getShort(o + bb_pos) else 1
        }
    val bitWidth : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 32
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_2_0_0()
        fun getRootAsTime(_bb: ByteBuffer): Time = getRootAsTime(_bb, Time())
        fun getRootAsTime(_bb: ByteBuffer, obj: Time): Time {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createTime(builder: FlatBufferBuilder, unit: Short, bitWidth: Int) : Int {
            builder.startTable(2)
            addBitWidth(builder, bitWidth)
            addUnit(builder, unit)
            return endTime(builder)
        }
        fun startTime(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addUnit(builder: FlatBufferBuilder, unit: Short) = builder.addShort(0, unit, 1)
        fun addBitWidth(builder: FlatBufferBuilder, bitWidth: Int) = builder.addInt(1, bitWidth, 32)
        fun endTime(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
