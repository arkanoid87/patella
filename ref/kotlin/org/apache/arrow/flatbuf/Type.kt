// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.flatbuf

/**
 * ----------------------------------------------------------------------
 * Top-level Type value, enabling extensible type-specific metadata. We can
 * add new logical types to Type without breaking backwards compatibility
 */
@Suppress("unused")
@ExperimentalUnsignedTypes
class Type private constructor() {
    companion object {
        const val NONE: UByte = 0u
        const val Null: UByte = 1u
        const val Int: UByte = 2u
        const val FloatingPoint: UByte = 3u
        const val Binary: UByte = 4u
        const val Utf8: UByte = 5u
        const val Bool: UByte = 6u
        const val Decimal: UByte = 7u
        const val Date: UByte = 8u
        const val Time: UByte = 9u
        const val Timestamp: UByte = 10u
        const val Interval: UByte = 11u
        const val List: UByte = 12u
        const val Struct_: UByte = 13u
        const val Union: UByte = 14u
        const val FixedSizeBinary: UByte = 15u
        const val FixedSizeList: UByte = 16u
        const val Map: UByte = 17u
        const val Duration: UByte = 18u
        const val LargeBinary: UByte = 19u
        const val LargeUtf8: UByte = 20u
        const val LargeList: UByte = 21u
        val names : Array<String> = arrayOf("NONE", "Null", "Int", "FloatingPoint", "Binary", "Utf8", "Bool", "Decimal", "Date", "Time", "Timestamp", "Interval", "List", "Struct_", "Union", "FixedSizeBinary", "FixedSizeList", "Map", "Duration", "LargeBinary", "LargeUtf8", "LargeList")
        fun name(e: Int) : String = names[e]
    }
}
