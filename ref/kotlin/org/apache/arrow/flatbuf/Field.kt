// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.flatbuf

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * ----------------------------------------------------------------------
 * A field represents a named column in a record / row batch or child of a
 * nested type.
 */
@Suppress("unused")
@ExperimentalUnsignedTypes
class Field : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Field {
        __init(_i, _bb)
        return this
    }
    /**
     * Name is not required, in i.e. a List
     */
    val name : String?
        get() {
            val o = __offset(4)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val nameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun nameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    /**
     * Whether or not this field can contain nulls. Should be true in general.
     */
    val nullable : Boolean
        get() {
            val o = __offset(6)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val typeType : UByte
        get() {
            val o = __offset(8)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    /**
     * This is the type of the decoded value if the field is dictionary encoded.
     */
    fun type(obj: Table) : Table? {
        val o = __offset(10); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    /**
     * Present only if the field is dictionary encoded.
     */
    val dictionary : org.apache.arrow.flatbuf.DictionaryEncoding? get() = dictionary(org.apache.arrow.flatbuf.DictionaryEncoding())
    fun dictionary(obj: org.apache.arrow.flatbuf.DictionaryEncoding) : org.apache.arrow.flatbuf.DictionaryEncoding? {
        val o = __offset(12)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    /**
     * children apply only to nested data types like Struct, List and Union. For
     * primitive types children will have length 0.
     */
    fun children(j: Int) : org.apache.arrow.flatbuf.Field? = children(org.apache.arrow.flatbuf.Field(), j)
    fun children(obj: org.apache.arrow.flatbuf.Field, j: Int) : org.apache.arrow.flatbuf.Field? {
        val o = __offset(14)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val childrenLength : Int
        get() {
            val o = __offset(14); return if (o != 0) __vector_len(o) else 0
        }
    /**
     * User-defined metadata
     */
    fun customMetadata(j: Int) : org.apache.arrow.flatbuf.KeyValue? = customMetadata(org.apache.arrow.flatbuf.KeyValue(), j)
    fun customMetadata(obj: org.apache.arrow.flatbuf.KeyValue, j: Int) : org.apache.arrow.flatbuf.KeyValue? {
        val o = __offset(16)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val customMetadataLength : Int
        get() {
            val o = __offset(16); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_2_0_0()
        fun getRootAsField(_bb: ByteBuffer): Field = getRootAsField(_bb, Field())
        fun getRootAsField(_bb: ByteBuffer, obj: Field): Field {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createField(builder: FlatBufferBuilder, nameOffset: Int, nullable: Boolean, typeType: UByte, typeOffset: Int, dictionaryOffset: Int, childrenOffset: Int, customMetadataOffset: Int) : Int {
            builder.startTable(7)
            addCustomMetadata(builder, customMetadataOffset)
            addChildren(builder, childrenOffset)
            addDictionary(builder, dictionaryOffset)
            addType(builder, typeOffset)
            addName(builder, nameOffset)
            addTypeType(builder, typeType)
            addNullable(builder, nullable)
            return endField(builder)
        }
        fun startField(builder: FlatBufferBuilder) = builder.startTable(7)
        fun addName(builder: FlatBufferBuilder, name: Int) = builder.addOffset(0, name, 0)
        fun addNullable(builder: FlatBufferBuilder, nullable: Boolean) = builder.addBoolean(1, nullable, false)
        fun addTypeType(builder: FlatBufferBuilder, typeType: UByte) = builder.addByte(2, typeType.toByte(), 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addOffset(3, type, 0)
        fun addDictionary(builder: FlatBufferBuilder, dictionary: Int) = builder.addOffset(4, dictionary, 0)
        fun addChildren(builder: FlatBufferBuilder, children: Int) = builder.addOffset(5, children, 0)
        fun createChildrenVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startChildrenVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addCustomMetadata(builder: FlatBufferBuilder, customMetadata: Int) = builder.addOffset(6, customMetadata, 0)
        fun createCustomMetadataVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startCustomMetadataVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endField(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
