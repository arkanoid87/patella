// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.flatbuf

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

/**
 * A union is a complex type with children in Field
 * By default ids in the type vector refer to the offsets in the children
 * optionally typeIds provides an indirection between the child offset and the type id
 * for each child `typeIds[offset]` is the id used in the type vector
 */
@Suppress("unused")
@ExperimentalUnsignedTypes
class Union : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Union {
        __init(_i, _bb)
        return this
    }
    val mode : Short
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getShort(o + bb_pos) else 0
        }
    fun typeIds(j: Int) : Int {
        val o = __offset(6)
        return if (o != 0) {
            bb.getInt(__vector(o) + j * 4)
        } else {
            0
        }
    }
    val typeIdsLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    val typeIdsAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 4)
    fun typeIdsInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 4)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_2_0_0()
        fun getRootAsUnion(_bb: ByteBuffer): Union = getRootAsUnion(_bb, Union())
        fun getRootAsUnion(_bb: ByteBuffer, obj: Union): Union {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createUnion(builder: FlatBufferBuilder, mode: Short, typeIdsOffset: Int) : Int {
            builder.startTable(2)
            addTypeIds(builder, typeIdsOffset)
            addMode(builder, mode)
            return endUnion(builder)
        }
        fun startUnion(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addMode(builder: FlatBufferBuilder, mode: Short) = builder.addShort(0, mode, 0)
        fun addTypeIds(builder: FlatBufferBuilder, typeIds: Int) = builder.addOffset(1, typeIds, 0)
        fun createTypeIdsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addInt(data[i])
            }
            return builder.endVector()
        }
        fun startTypeIdsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endUnion(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
