// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.flatbuf

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class FloatingPoint : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : FloatingPoint {
        __init(_i, _bb)
        return this
    }
    val precision : Short
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getShort(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_2_0_0()
        fun getRootAsFloatingPoint(_bb: ByteBuffer): FloatingPoint = getRootAsFloatingPoint(_bb, FloatingPoint())
        fun getRootAsFloatingPoint(_bb: ByteBuffer, obj: FloatingPoint): FloatingPoint {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createFloatingPoint(builder: FlatBufferBuilder, precision: Short) : Int {
            builder.startTable(1)
            addPrecision(builder, precision)
            return endFloatingPoint(builder)
        }
        fun startFloatingPoint(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addPrecision(builder: FlatBufferBuilder, precision: Short) = builder.addShort(0, precision, 0)
        fun endFloatingPoint(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
