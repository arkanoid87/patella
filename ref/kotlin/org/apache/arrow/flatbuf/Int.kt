// automatically generated by the FlatBuffers compiler, do not modify

package org.apache.arrow.flatbuf

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class Int : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Int {
        __init(_i, _bb)
        return this
    }
    val bitWidth : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val isSigned : Boolean
        get() {
            val o = __offset(6)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_2_0_0()
        fun getRootAsInt(_bb: ByteBuffer): Int = getRootAsInt(_bb, Int())
        fun getRootAsInt(_bb: ByteBuffer, obj: Int): Int {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createInt(builder: FlatBufferBuilder, bitWidth: Int, isSigned: Boolean) : Int {
            builder.startTable(2)
            addBitWidth(builder, bitWidth)
            addIsSigned(builder, isSigned)
            return endInt(builder)
        }
        fun startInt(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addBitWidth(builder: FlatBufferBuilder, bitWidth: Int) = builder.addInt(0, bitWidth, 0)
        fun addIsSigned(builder: FlatBufferBuilder, isSigned: Boolean) = builder.addBoolean(1, isSigned, false)
        fun endInt(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
