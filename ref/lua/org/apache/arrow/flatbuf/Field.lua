--[[ org.apache.arrow.flatbuf.Field

  Automatically generated by the FlatBuffers compiler, do not modify.
  Or modify. I'm a message, not a cop.

  flatc version: 2.0.5

  Declared by  : //Schema.fbs
  Rooting type : org.apache.arrow.flatbuf.Schema (//Schema.fbs)

--]]

local __org_apache_arrow_flatbuf_DictionaryEncoding = require('org.apache.arrow.flatbuf.DictionaryEncoding')
local __org_apache_arrow_flatbuf_KeyValue = require('org.apache.arrow.flatbuf.KeyValue')
local flatbuffers = require('flatbuffers')

-- ----------------------------------------------------------------------
-- A field represents a named column in a record / row batch or child of a
-- nested type.
local Field = {}
local mt = {}

function Field.New()
  local o = {}
  setmetatable(o, {__index = mt})
  return o
end

function mt:Init(buf, pos)
  self.view = flatbuffers.view.New(buf, pos)
end

-- Name is not required, in i.e. a List
function mt:Name()
  local o = self.view:Offset(4)
  if o ~= 0 then
    return self.view:String(self.view.pos + o)
  end
end

-- Whether or not this field can contain nulls. Should be true in general.
function mt:Nullable()
  local o = self.view:Offset(6)
  if o ~= 0 then
    return (self.view:Get(flatbuffers.N.Bool, self.view.pos + o) ~=0)
  end
  return false
end

function mt:TypeType()
  local o = self.view:Offset(8)
  if o ~= 0 then
    return self.view:Get(flatbuffers.N.Uint8, self.view.pos + o)
  end
  return 0
end

-- This is the type of the decoded value if the field is dictionary encoded.
function mt:Type()
  local o = self.view:Offset(10)
  if o ~= 0 then
   local obj = flatbuffers.view.New(flatbuffers.binaryArray.New(0), 0)
    self.view:Union(obj, o)
    return obj
  end
end

-- Present only if the field is dictionary encoded.
function mt:Dictionary()
  local o = self.view:Offset(12)
  if o ~= 0 then
    local x = self.view:Indirect(self.view.pos + o)
    local obj = __org_apache_arrow_flatbuf_DictionaryEncoding.New()
    obj:Init(self.view.bytes, x)
    return obj
  end
end

-- children apply only to nested data types like Struct, List and Union. For
-- primitive types children will have length 0.
function mt:Children(j)
  local o = self.view:Offset(14)
  if o ~= 0 then
    local x = self.view:Vector(o)
    x = x + ((j-1) * 4)
    x = self.view:Indirect(x)
    local obj = Field.New()
    obj:Init(self.view.bytes, x)
    return obj
  end
end

function mt:ChildrenLength()
  local o = self.view:Offset(14)
  if o ~= 0 then
    return self.view:VectorLen(o)
  end
  return 0
end

-- User-defined metadata
function mt:CustomMetadata(j)
  local o = self.view:Offset(16)
  if o ~= 0 then
    local x = self.view:Vector(o)
    x = x + ((j-1) * 4)
    x = self.view:Indirect(x)
    local obj = __org_apache_arrow_flatbuf_KeyValue.New()
    obj:Init(self.view.bytes, x)
    return obj
  end
end

function mt:CustomMetadataLength()
  local o = self.view:Offset(16)
  if o ~= 0 then
    return self.view:VectorLen(o)
  end
  return 0
end

function Field.Start(builder)
  builder:StartObject(7)
end

function Field.AddName(builder, name)
  builder:PrependUOffsetTRelativeSlot(0, name, 0)
end

function Field.AddNullable(builder, nullable)
  builder:PrependBoolSlot(1, nullable, false)
end

function Field.AddTypeType(builder, typeType)
  builder:PrependUint8Slot(2, typeType, 0)
end

function Field.AddType(builder, type)
  builder:PrependUOffsetTRelativeSlot(3, type, 0)
end

function Field.AddDictionary(builder, dictionary)
  builder:PrependStructSlot(4, dictionary, 0)
end

function Field.AddChildren(builder, children)
  builder:PrependUOffsetTRelativeSlot(5, children, 0)
end

function Field.StartChildrenVector(builder, numElems)
  return builder:StartVector(4, numElems, 4)
end

function Field.AddCustomMetadata(builder, customMetadata)
  builder:PrependUOffsetTRelativeSlot(6, customMetadata, 0)
end

function Field.StartCustomMetadataVector(builder, numElems)
  return builder:StartVector(4, numElems, 4)
end

function Field.End(builder)
  return builder:EndObject()
end

return Field