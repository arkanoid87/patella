--[[ org.apache.arrow.flatbuf.Decimal

  Automatically generated by the FlatBuffers compiler, do not modify.
  Or modify. I'm a message, not a cop.

  flatc version: 2.0.5

  Declared by  : //Schema.fbs
  Rooting type : org.apache.arrow.flatbuf.Schema (//Schema.fbs)

--]]

local flatbuffers = require('flatbuffers')

-- Exact decimal value represented as an integer value in two's
-- complement. Currently only 128-bit (16-byte) and 256-bit (32-byte) integers
-- are used. The representation uses the endianness indicated
-- in the Schema.
local Decimal = {}
local mt = {}

function Decimal.New()
  local o = {}
  setmetatable(o, {__index = mt})
  return o
end

function mt:Init(buf, pos)
  self.view = flatbuffers.view.New(buf, pos)
end

-- Total number of decimal digits
function mt:Precision()
  local o = self.view:Offset(4)
  if o ~= 0 then
    return self.view:Get(flatbuffers.N.Int32, self.view.pos + o)
  end
  return 0
end

-- Number of digits after the decimal point "."
function mt:Scale()
  local o = self.view:Offset(6)
  if o ~= 0 then
    return self.view:Get(flatbuffers.N.Int32, self.view.pos + o)
  end
  return 0
end

-- Number of bits per value. The only accepted widths are 128 and 256.
-- We use bitWidth for consistency with Int::bitWidth.
function mt:BitWidth()
  local o = self.view:Offset(8)
  if o ~= 0 then
    return self.view:Get(flatbuffers.N.Int32, self.view.pos + o)
  end
  return 128
end

function Decimal.Start(builder)
  builder:StartObject(3)
end

function Decimal.AddPrecision(builder, precision)
  builder:PrependInt32Slot(0, precision, 0)
end

function Decimal.AddScale(builder, scale)
  builder:PrependInt32Slot(1, scale, 0)
end

function Decimal.AddBitWidth(builder, bitWidth)
  builder:PrependInt32Slot(2, bitWidth, 128)
end

function Decimal.End(builder)
  return builder:EndObject()
end

return Decimal