// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_FEATURE: i64 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_FEATURE: i64 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_FEATURE: [Feature; 3] = [
  Feature::UNUSED,
  Feature::DICTIONARY_REPLACEMENT,
  Feature::COMPRESSED_BODY,
];

/// Represents Arrow Features that might not have full support
/// within implementations. This is intended to be used in
/// two scenarios:
///  1.  A mechanism for readers of Arrow Streams
///      and files to understand that the stream or file makes
///      use of a feature that isn't supported or unknown to
///      the implementation (and therefore can meet the Arrow
///      forward compatibility guarantees).
///  2.  A means of negotiating between a client and server
///      what features a stream is allowed to use. The enums
///      values here are intented to represent higher level
///      features, additional details maybe negotiated
///      with key-value pairs specific to the protocol.
///
/// Enums added to this list should be assigned power-of-two values
/// to facilitate exchanging and comparing bitmaps for supported
/// features.
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Feature(pub i64);
#[allow(non_upper_case_globals)]
impl Feature {
  /// Needed to make flatbuffers happy.
  pub const UNUSED: Self = Self(0);
  /// The stream makes use of multiple full dictionaries with the
  /// same ID and assumes clients implement dictionary replacement
  /// correctly.
  pub const DICTIONARY_REPLACEMENT: Self = Self(1);
  /// The stream makes use of compressed bodies as described
  /// in Message.fbs.
  pub const COMPRESSED_BODY: Self = Self(2);

  pub const ENUM_MIN: i64 = 0;
  pub const ENUM_MAX: i64 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::UNUSED,
    Self::DICTIONARY_REPLACEMENT,
    Self::COMPRESSED_BODY,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::UNUSED => Some("UNUSED"),
      Self::DICTIONARY_REPLACEMENT => Some("DICTIONARY_REPLACEMENT"),
      Self::COMPRESSED_BODY => Some("COMPRESSED_BODY"),
      _ => None,
    }
  }
}
impl std::fmt::Debug for Feature {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Feature {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<i64>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for Feature {
    type Output = Feature;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<i64>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for Feature {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = i64::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = i64::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Feature {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i64::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Feature {}
