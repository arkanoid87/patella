// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
pub enum IntOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Int<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Int<'a> {
  type Inner = Int<'a>;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table { buf, loc } }
  }
}

impl<'a> Int<'a> {
  pub const VT_BITWIDTH: flatbuffers::VOffsetT = 4;
  pub const VT_IS_SIGNED: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Int { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args IntArgs
  ) -> flatbuffers::WIPOffset<Int<'bldr>> {
    let mut builder = IntBuilder::new(_fbb);
    builder.add_bitWidth(args.bitWidth);
    builder.add_is_signed(args.is_signed);
    builder.finish()
  }


  #[inline]
  pub fn bitWidth(&self) -> i32 {
    self._tab.get::<i32>(Int::VT_BITWIDTH, Some(0)).unwrap()
  }
  #[inline]
  pub fn is_signed(&self) -> bool {
    self._tab.get::<bool>(Int::VT_IS_SIGNED, Some(false)).unwrap()
  }
}

impl flatbuffers::Verifiable for Int<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("bitWidth", Self::VT_BITWIDTH, false)?
     .visit_field::<bool>("is_signed", Self::VT_IS_SIGNED, false)?
     .finish();
    Ok(())
  }
}
pub struct IntArgs {
    pub bitWidth: i32,
    pub is_signed: bool,
}
impl<'a> Default for IntArgs {
  #[inline]
  fn default() -> Self {
    IntArgs {
      bitWidth: 0,
      is_signed: false,
    }
  }
}
pub struct IntBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> IntBuilder<'a, 'b> {
  #[inline]
  pub fn add_bitWidth(&mut self, bitWidth: i32) {
    self.fbb_.push_slot::<i32>(Int::VT_BITWIDTH, bitWidth, 0);
  }
  #[inline]
  pub fn add_is_signed(&mut self, is_signed: bool) {
    self.fbb_.push_slot::<bool>(Int::VT_IS_SIGNED, is_signed, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> IntBuilder<'a, 'b> {
    let start = _fbb.start_table();
    IntBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Int<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for Int<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("Int");
      ds.field("bitWidth", &self.bitWidth());
      ds.field("is_signed", &self.is_signed());
      ds.finish()
  }
}
