<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace org\apache\arrow\flatbuf;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class Int extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Int
     */
    public static function getRootAsInt(ByteBuffer $bb)
    {
        $obj = new Int();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Int
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return int
     */
    public function getBitWidth()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @return bool
     */
    public function getIsSigned()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startInt(FlatBufferBuilder $builder)
    {
        $builder->StartObject(2);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Int
     */
    public static function createInt(FlatBufferBuilder $builder, $bitWidth, $is_signed)
    {
        $builder->startObject(2);
        self::addBitWidth($builder, $bitWidth);
        self::addIsSigned($builder, $is_signed);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addBitWidth(FlatBufferBuilder $builder, $bitWidth)
    {
        $builder->addIntX(0, $bitWidth, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addIsSigned(FlatBufferBuilder $builder, $isSigned)
    {
        $builder->addBoolX(1, $isSigned, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endInt(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
