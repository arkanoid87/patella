<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace org\apache\arrow\flatbuf;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class DictionaryEncoding extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return DictionaryEncoding
     */
    public static function getRootAsDictionaryEncoding(ByteBuffer $bb)
    {
        $obj = new DictionaryEncoding();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return DictionaryEncoding
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// The known dictionary id in the application where this data is used. In
    /// the file or streaming formats, the dictionary ids are found in the
    /// DictionaryBatch messages
    /**
     * @return long
     */
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /// The dictionary indices are constrained to be non-negative integers. If
    /// this field is null, the indices must be signed int32. To maximize
    /// cross-language compatibility and performance, implementations are
    /// recommended to prefer signed integer types over unsigned integer types
    /// and to avoid uint64 indices unless they are required by an application.
    public function getIndexType()
    {
        $obj = new Int();
        $o = $this->__offset(6);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// By default, dictionaries are not ordered, or the order does not have
    /// semantic meaning. In some statistical, applications, dictionary-encoding
    /// is used to represent ordered categorical data, and we provide a way to
    /// preserve that metadata here
    /**
     * @return bool
     */
    public function getIsOrdered()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @return short
     */
    public function getDictionaryKind()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : \org\apache\arrow\flatbuf\DictionaryKind::DenseArray;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startDictionaryEncoding(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return DictionaryEncoding
     */
    public static function createDictionaryEncoding(FlatBufferBuilder $builder, $id, $indexType, $isOrdered, $dictionaryKind)
    {
        $builder->startObject(4);
        self::addId($builder, $id);
        self::addIndexType($builder, $indexType);
        self::addIsOrdered($builder, $isOrdered);
        self::addDictionaryKind($builder, $dictionaryKind);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addLongX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addIndexType(FlatBufferBuilder $builder, $indexType)
    {
        $builder->addOffsetX(1, $indexType, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addIsOrdered(FlatBufferBuilder $builder, $isOrdered)
    {
        $builder->addBoolX(2, $isOrdered, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addDictionaryKind(FlatBufferBuilder $builder, $dictionaryKind)
    {
        $builder->addShortX(3, $dictionaryKind, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endDictionaryEncoding(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
