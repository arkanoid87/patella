<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace org\apache\arrow\flatbuf;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// ----------------------------------------------------------------------
/// A field represents a named column in a record / row batch or child of a
/// nested type.
class Field extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Field
     */
    public static function getRootAsField(ByteBuffer $bb)
    {
        $obj = new Field();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Field
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /// Name is not required, in i.e. a List
    public function getName()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /// Whether or not this field can contain nulls. Should be true in general.
    /**
     * @return bool
     */
    public function getNullable()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @return byte
     */
    public function getTypeType()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : \org\apache\arrow\flatbuf\Type::NONE;
    }

    /// This is the type of the decoded value if the field is dictionary encoded.
    /**
     * @returnint
     */
    public function getType($obj)
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__union($obj, $o) : null;
    }

    /// Present only if the field is dictionary encoded.
    public function getDictionary()
    {
        $obj = new DictionaryEncoding();
        $o = $this->__offset(12);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /// children apply only to nested data types like Struct, List and Union. For
    /// primitive types children will have length 0.
    /**
     * @returnVectorOffset
     */
    public function getChildren($j)
    {
        $o = $this->__offset(14);
        $obj = new Field();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getChildrenLength()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /// User-defined metadata
    /**
     * @returnVectorOffset
     */
    public function getCustomMetadata($j)
    {
        $o = $this->__offset(16);
        $obj = new KeyValue();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getCustomMetadataLength()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startField(FlatBufferBuilder $builder)
    {
        $builder->StartObject(7);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Field
     */
    public static function createField(FlatBufferBuilder $builder, $name, $nullable, $type_type, $type, $dictionary, $children, $custom_metadata)
    {
        $builder->startObject(7);
        self::addName($builder, $name);
        self::addNullable($builder, $nullable);
        self::addTypeType($builder, $type_type);
        self::addType($builder, $type);
        self::addDictionary($builder, $dictionary);
        self::addChildren($builder, $children);
        self::addCustomMetadata($builder, $custom_metadata);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addName(FlatBufferBuilder $builder, $name)
    {
        $builder->addOffsetX(0, $name, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addNullable(FlatBufferBuilder $builder, $nullable)
    {
        $builder->addBoolX(1, $nullable, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addTypeType(FlatBufferBuilder $builder, $typeType)
    {
        $builder->addByteX(2, $typeType, 0);
    }

    public static function addType(FlatBufferBuilder $builder, $offset)
    {
        $builder->addOffsetX(3, $offset, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDictionary(FlatBufferBuilder $builder, $dictionary)
    {
        $builder->addOffsetX(4, $dictionary, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addChildren(FlatBufferBuilder $builder, $children)
    {
        $builder->addOffsetX(5, $children, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createChildrenVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startChildrenVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCustomMetadata(FlatBufferBuilder $builder, $customMetadata)
    {
        $builder->addOffsetX(6, $customMetadata, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createCustomMetadataVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startCustomMetadataVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endField(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
