<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace org\apache\arrow\flatbuf;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

/// Same as List, but with 64-bit offsets, allowing to represent
/// extremely large data values.
class LargeList extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return LargeList
     */
    public static function getRootAsLargeList(ByteBuffer $bb)
    {
        $obj = new LargeList();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return LargeList
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startLargeList(FlatBufferBuilder $builder)
    {
        $builder->StartObject(0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return LargeList
     */
    public static function createLargeList(FlatBufferBuilder $builder, )
    {
        $builder->startObject(0);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endLargeList(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
