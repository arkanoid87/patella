<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace org\apache\arrow\flatbuf;

/// ----------------------------------------------------------------------
/// Top-level Type value, enabling extensible type-specific metadata. We can
/// add new logical types to Type without breaking backwards compatibility
class Type
{
    const NONE = 0;
    const Null = 1;
    const Int = 2;
    const FloatingPoint = 3;
    const Binary = 4;
    const Utf8 = 5;
    const Bool = 6;
    const Decimal = 7;
    const Date = 8;
    const Time = 9;
    const Timestamp = 10;
    const Interval = 11;
    const List = 12;
    const Struct_ = 13;
    const Union = 14;
    const FixedSizeBinary = 15;
    const FixedSizeList = 16;
    const Map = 17;
    const Duration = 18;
    const LargeBinary = 19;
    const LargeUtf8 = 20;
    const LargeList = 21;

    private static $names = array(
        Type::NONE=>"NONE",
        Type::Null=>"Null",
        Type::Int=>"Int",
        Type::FloatingPoint=>"FloatingPoint",
        Type::Binary=>"Binary",
        Type::Utf8=>"Utf8",
        Type::Bool=>"Bool",
        Type::Decimal=>"Decimal",
        Type::Date=>"Date",
        Type::Time=>"Time",
        Type::Timestamp=>"Timestamp",
        Type::Interval=>"Interval",
        Type::List=>"List",
        Type::Struct_=>"Struct_",
        Type::Union=>"Union",
        Type::FixedSizeBinary=>"FixedSizeBinary",
        Type::FixedSizeList=>"FixedSizeList",
        Type::Map=>"Map",
        Type::Duration=>"Duration",
        Type::LargeBinary=>"LargeBinary",
        Type::LargeUtf8=>"LargeUtf8",
        Type::LargeList=>"LargeList",
    );

    public static function Name($e)
    {
        if (!isset(self::$names[$e])) {
            throw new \Exception();
        }
        return self::$names[$e];
    }
}
